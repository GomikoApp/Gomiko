// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```

class DefaultFirebaseOptions {
  // String appleKey = dotenv.env['GOOGLE_API_KEY_APPLE'] == null ? '' : "$dotenv.env['GOOGLE_API_KEY_APPLE']";
  // final String androidKey = dotenv.env['GOOGLE_API_KEY_ANDROID'] == null ? '' : "$dotenv.env['GOOGLE_API_KEY_ANDROID']";
  // final String webKey = dotenv.env['GOOGLE_API_KEY_WEB'] == null ? '' : "$dotenv.env['GOOGLE_API_KEY_WEB']";

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['GOOGLE_API_KEY_WEB'] == null ? '' : "${dotenv.env['GOOGLE_API_KEY_WEB']}",
    appId: '1:872903978882:web:456e624549768f3466a99b',
    messagingSenderId: '872903978882',
    projectId: 'gomiko-app',
    authDomain: 'gomiko-app.firebaseapp.com',
    storageBucket: 'gomiko-app.appspot.com',
    measurementId: 'G-Q0DB03E77C',
  );

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['GOOGLE_API_KEY_ANDROID'] == null ? '' : "${dotenv.env['GOOGLE_API_KEY_ANDROID']}",
    appId: '1:872903978882:android:f3de32c101827d7766a99b',
    messagingSenderId: '872903978882',
    projectId: 'gomiko-app',
    storageBucket: 'gomiko-app.appspot.com',
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['GOOGLE_API_KEY_APPLE'] == null ? '' : "${dotenv.env['GOOGLE_API_KEY_APPLE']}",
    appId: '1:872903978882:ios:c6c36e0429bd2f3166a99b',
    messagingSenderId: '872903978882',
    projectId: 'gomiko-app',
    storageBucket: 'gomiko-app.appspot.com',
    iosBundleId: 'com.example.recycle',
  );

  static final FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env['GOOGLE_API_KEY_APPLE'] == null ? '' : "${dotenv.env['GOOGLE_API_KEY_APPLE']}",
    appId: '1:872903978882:ios:8462633dd3ecb05466a99b',
    messagingSenderId: '872903978882',
    projectId: 'gomiko-app',
    storageBucket: 'gomiko-app.appspot.com',
    iosBundleId: 'com.example.recycle.RunnerTests',
  );
}
